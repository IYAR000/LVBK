name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt-get update && \
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libgl1-mesa-glx libglib2.0-0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install development dependencies
      run: |
        pip install pytest-cov black flake8 mypy

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check src/

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=src/ --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        pytest tests/integration/ --cov=src/ --cov-append

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        safety check --file requirements.txt

    - name: Run bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Podman
      uses: redhat-actions/setup-podman@v1
      with:
        podman-version: "latest"

    - name: Build container image
      run: |
        podman build -t lvbk:${{ github.sha }} .

    - name: Test container
      run: |
        podman run --rm lvbk:${{ github.sha }} python -c "import lvbk; print('Container build successful')"

    - name: Save container image
      run: |
        podman save lvbk:${{ github.sha }} | gzip > lvbk-image.tar.gz

    - name: Upload container image
      uses: actions/upload-artifact@v3
      with:
        name: lvbk-container-image
        path: lvbk-image.tar.gz

